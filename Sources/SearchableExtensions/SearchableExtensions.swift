import SwiftUI
import UIKit

extension View {
    /// Focus after transition on UISearchBar generated by searchable
    ///
    /// # Caution
    /// Only Stack is supported for Navigation type; Column is not focused due to different internal structure.
    @available(iOS, introduced: 15.0, deprecated: 10000.0, message: "use .searchable(text:isPresented:) instead")
    public func searchableFocusOnAppear() -> some View {
        background(SearchableFocusInspection())
    }
}

/// Focus control with SearchBar location and Delegate replacement source retained.
private class SearchableFocusInspectionViewController: UIViewController, UINavigationControllerDelegate {
    var searchBar: UISearchBar?
    var originalDelegate: (any UINavigationControllerDelegate)?

    /// If it is not after the Navigation transition, focus control can be performed by firing at this timing.
    ///
    /// The timing to call becomeFirstResponder is after the screen is built.
    /// If Navigation is included, it is necessary to get the timing of the didShow.
    /// Unlike that, SwiftUI sheet, fullScreenCover is built after UITransitionView control,
    /// so the timing for viewDidAppear is after that. Therefore, the control is completed here.
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        searchBarFocusOn()
    }

    /// Hook focus control at the timing of didShow
    func navigationController(_ navigationController: UINavigationController, didShow viewController: UIViewController, animated: Bool) {
        originalDelegate?.navigationController?(navigationController, didShow: viewController, animated: animated)
        if viewController.children.contains(self) {
            searchBarFocusOn()
        }
    }

    /// Move First Responder to UISearchBar using focus control.
    /// Resign is issued by SwiftUI's Cancel button, so there is no need to explicitly implement it here.
    func searchBarFocusOn() {
        DispatchQueue.main.async {
            self.searchBar?.becomeFirstResponder()
        }
    }
}

private struct SearchableFocusInspection: UIViewControllerRepresentable {
    /// Focus on post-transition processing by replacing the Delegate of navigationController at screen startup.
    func makeUIViewController(context: Context) -> SearchableFocusInspectionViewController {
        let controller = SearchableFocusInspectionViewController()
        DispatchQueue.main.async {
            let searchBar = controller.navigationController?.navigationBar.subviews.first(where: { $0 is UISearchBar }) as? UISearchBar
            controller.originalDelegate = controller.navigationController?.delegate
            controller.navigationController?.delegate = controller
            controller.searchBar = searchBar
        }
        return controller
    }

    func updateUIViewController(_ uiViewController: SearchableFocusInspectionViewController, context: Context) {}

    /// Revert the Delegate of navigationController.
    static func dismantleUIViewController(_ uiViewController: SearchableFocusInspectionViewController, coordinator: ()) {
        uiViewController.navigationController?.delegate = uiViewController.originalDelegate
    }
}
